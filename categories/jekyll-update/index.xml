<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jekyll Update on Blog</title><link>https://kevinkle.in/categories/jekyll-update/</link><description>Recent content in Jekyll Update on Blog</description><generator>Hugo</generator><language>en-us</language><copyright>Â© Kevin Klein</copyright><lastBuildDate>Fri, 03 Aug 2018 16:38:07 +0200</lastBuildDate><atom:link href="https://kevinkle.in/categories/jekyll-update/index.xml" rel="self" type="application/rss+xml"/><item><title>Time Is Money</title><link>https://kevinkle.in/posts/2018-07-29-tim/</link><pubDate>Fri, 03 Aug 2018 16:38:07 +0200</pubDate><guid>https://kevinkle.in/posts/2018-07-29-tim/</guid><description>&lt;p>This post is about a browser add-on that is hopefully a drop in the ocean towards a rather ambitious goal. It&amp;rsquo;s called &lt;a href="https://github.com/kklein/timeismoney">TimeIsMoney&lt;/a>.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>A while back I listened to &lt;a href="https://samharris.org/podcasts/what-is-technology-doing-to-us/">Sam Harris&amp;rsquo; podcast with Tristan Harris&lt;/a>. What remained was following:&lt;/p>
&lt;p>I agreed that most technology is agnostic. At the same time, a lot of technology stemming from or being a byproduct of the attention economy is rather geared towards a usage that is a net disadvantage for the user. What I mean by that is that such technology has both advantages and disadvantages that can at least partly be isolated. Yet a somewhat unconscious usage, think: path of least resistance, will often weigh the disadvantages more heavily. I don&amp;rsquo;t see why this would be an intrinsic property of such products and services, it just happens to be the case for most examples I could think of.&lt;/p></description></item><item><title>Matrix Factorization in Collaborative Filtering</title><link>https://kevinkle.in/posts/2018-07-10-cf-mf/</link><pubDate>Tue, 10 Jul 2018 16:38:07 +0200</pubDate><guid>https://kevinkle.in/posts/2018-07-10-cf-mf/</guid><description>&lt;h2 id="the-task">The Task&lt;/h2>
&lt;p>We are given a set of tuples representing user-movie ratings, \(\mathcal{R} = \{(i,j,r)\}\), where \(i\) is the user index, \(j\) is the movie index and \(r \in [0, \dots, 5]\) the rating.
In the most common scenarios, only a fraction of all user-movie pairs are rated, hence we can talk about &lt;em>sparse&lt;/em> data.
In other words, most users have only rated a few movies. Now we want to obtain sensible predictions for movies a user has not rated. I leave drawing to picture as to why this is super relevant in many use cases to your imagination. Note that we only have this explicit feedback from users and don&amp;rsquo;t have any context knowledge about the users or movies. We can only leverage ratings from other users to build predictions. This is called collaborative filtering.&lt;/p></description></item></channel></rss>